name: ðŸš€ Main CI/CD Pipeline

on:
  push:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest test_sample.py -v

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          pip install bandit
          bandit -r . -f json || echo "Security scan completed"

  version-and-changelog:
    needs: [test, security]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Detect branch type
        id: branch-type
        run: |
          if [[ "${{ github.ref }}" == *"hotfix"* ]] || [[ "${{ github.event.head_commit.message }}" == *"hotfix"* ]]; then
            echo "type=hotfix" >> $GITHUB_OUTPUT
          else
            echo "type=feature" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: bump
        run: |
          OLD_VERSION=$(cat version.txt)
          python scripts/bump_version.py ${{ steps.branch-type.outputs.type }}
          NEW_VERSION=$(cat version.txt)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped: $OLD_VERSION -> $NEW_VERSION"

      - name: Generate changelog
        run: |
          python scripts/generate_changelog.py ${{ steps.bump.outputs.new_version }} ${{ github.ref_name }}

      - name: Commit changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add version.txt changelog.md
          git commit -m "ci: bump version to ${{ steps.bump.outputs.new_version }}"
          git push

  build-and-publish:
    needs: version-and-changelog
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/pipeline-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.version-and-changelog.outputs.new_version }}
            ${{ env.IMAGE_NAME }}:latest

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md

  deploy:
    needs: build-and-publish
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/pipeline-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy application
        run: |
          # Stop and remove old container if exists
          docker stop pipeline-app || true
          docker rm pipeline-app || true
          
          # Run new container
          docker run -d \
            --name pipeline-app \
            -p 8000:8000 \
            ${{ env.IMAGE_NAME }}:${{ needs.version-and-changelog.outputs.new_version }}

      - name: Verify deployment
        run: |
          sleep 10
          curl -f http://localhost:8000/ || exit 1
          echo "âœ… Deployment successful!"

  notify-and-release:
    needs: [deploy, version-and-changelog]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Send Telegram notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          NEW_VERSION: ${{ needs.version-and-changelog.outputs.new_version }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python scripts/notify_telegram.py

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-and-changelog.outputs.new_version }}
          name: Release v${{ needs.version-and-changelog.outputs.new_version }}
          body_path: changelog.md
          draft: false
          prerelease: false