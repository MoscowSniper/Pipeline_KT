name: 🚀 Full CI/CD Pipeline

on:
  pull_request:
    types: [closed]
    branches: [main, master]

jobs:
  check-merge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      branch_type: ${{ steps.check-branch.outputs.branch_type }}
      branch_name: ${{ github.event.pull_request.head.ref }}
      pr_number: ${{ github.event.pull_request.number }}
    steps:
      - name: Check if PR was merged
        run: echo "PR #${{ github.event.pull_request.number }} merged from ${{ github.event.pull_request.head.ref }}"

      - name: Determine branch type
        id: check-branch
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" == feature/* ]]; then
            echo "branch_type=feature" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.pull_request.head.ref }}" == hotfix/* ]]; then
            echo "branch_type=hotfix" >> $GITHUB_OUTPUT
          else
            echo "branch_type=other" >> $GITHUB_OUTPUT
          fi

  tests:
    needs: check-merge
    if: needs.check-merge.outputs.branch_type == 'feature' || needs.check-merge.outputs.branch_type == 'hotfix'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run ${{ matrix.test-type }} tests
        run: |
          if [ "${{ matrix.test-type }}" == "unit" ]; then
            pytest test_sample.py -v
          else
            echo "Running integration tests stub..."
            # Здесь будут реальные интеграционные тесты
            echo "Integration tests passed"
          fi

      - name: Add test-passed label
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ needs.check-merge.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['test-passed']
            })

  security:
    needs: check-merge
    if: needs.check-merge.outputs.branch_type == 'feature' || needs.check-merge.outputs.branch_type == 'hotfix'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scan-type: [bandit, antivirus]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run ${{ matrix.scan-type }} scan
        run: |
          if [ "${{ matrix.scan-type }}" == "bandit" ]; then
            pip install bandit
            bandit -r . -f json -o bandit-report.json || echo "Bandit completed"
          else
            # Заглушка для антивирусной проверки
            echo "Running antivirus scan stub..."
            echo "No threats found"
          fi

      - name: Add sec-passed label
        if: success() && matrix.scan-type == 'bandit'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ needs.check-merge.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['sec-passed']
            })

  bump-version:
    needs: [tests, security]
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      old_version: ${{ steps.bump.outputs.old_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: current-version
        run: echo "current_version=$(cat version.txt)" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump
        run: |
          OLD_VERSION=$(cat version.txt)
          python scripts/bump_version.py ${{ needs.check-merge.outputs.branch_type }}
          NEW_VERSION=$(cat version.txt)
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version: $OLD_VERSION -> $NEW_VERSION"

      - name: Commit version update
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add version.txt
          git commit -m "[${{ steps.bump.outputs.new_version }}] < [${{ steps.bump.outputs.old_version }}] ${{ needs.check-merge.outputs.branch_type }} up"
          git push

      - name: Add version label
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ needs.check-merge.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['version-${{ steps.bump.outputs.new_version }}']
            })

  generate-changelog:
    needs: [bump-version, check-merge]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Generate changelog
        run: |
          python scripts/generate_changelog.py ${{ needs.bump-version.outputs.new_version }} ${{ needs.check-merge.outputs.branch_name }}

      - name: Commit changelog
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add changelog.md
          git commit -m "Update changelog for version ${{ needs.bump-version.outputs.new_version }}"
          git push

      - name: Add changelog label
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ needs.check-merge.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['changelog']
            })

  build-and-publish:
    needs: generate-changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/pipeline-app:${{ needs.bump-version.outputs.new_version }}
            ${{ secrets.DOCKER_USERNAME }}/pipeline-app:latest
          labels: |
            version=${{ needs.bump-version.outputs.new_version }}
            description="CI/CD Pipeline App"

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ secrets.DOCKER_USERNAME }}/pipeline-app
          readme-filepath: ./README.md

      - name: Add dockerhub label
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ needs.check-merge.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dockerhub']
            })

  deploy:
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
            docker pull ${{ secrets.DOCKER_USERNAME }}/pipeline-app:${{ needs.bump-version.outputs.new_version }} &&
            docker stop pipeline-app || true &&
            docker rm pipeline-app || true &&
            docker run -d --name pipeline-app -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/pipeline-app:${{ needs.bump-version.outputs.new_version }}
          "

      - name: Verify deployment
        run: |
          sleep 10
          curl -f http://${{ secrets.SERVER_IP }}:8000/version || exit 1

      - name: Add PROD label
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ needs.check-merge.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['PROD']
            })

  notify-telegram:
    needs: [deploy, bump-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Send Telegram notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          NEW_VERSION: ${{ needs.bump-version.outputs.new_version }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python scripts/notify_telegram.py

  create-release:
    needs: [deploy, bump-version, generate-changelog]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.bump-version.outputs.new_version }}
          name: "Release v${{ needs.bump-version.outputs.new_version }}"
          body_path: changelog.md
          draft: false
          prerelease: false