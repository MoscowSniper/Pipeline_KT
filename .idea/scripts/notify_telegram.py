#!/usr/bin/env python3
import os
import requests
from datetime import datetime
import subprocess

def get_git_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Git"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        commit_hash = subprocess.check_output(
            ['git', 'rev-parse', '--short', 'HEAD'],
            text=True
        ).strip()

        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
        author = subprocess.check_output(
            ['git', 'log', '-1', '--pretty=format:%an'],
            text=True
        ).strip()

        return commit_hash, author
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return "unknown", "unknown"

def send_telegram_message(bot_token, chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'HTML'
    }
    response = requests.post(url, json=payload)
    response.raise_for_status()
    return response.json()

def send_telegram_document(bot_token, chat_id, document_path, caption=""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ Telegram"""
    url = f"https://api.telegram.org/bot{bot_token}/sendDocument"
    with open(document_path, 'rb') as file:
        files = {'document': file}
        data = {'chat_id': chat_id, 'caption': caption}
        response = requests.post(url, files=files, data=data)
    response.raise_for_status()
    return response.json()

def main():
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    new_version = os.getenv('NEW_VERSION', 'unknown')
    repository = os.getenv('GITHUB_REPOSITORY', 'unknown/repo')
    docker_username = os.getenv('DOCKER_USERNAME', 'unknown')

    if not bot_token or not chat_id:
        print("‚ùå TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID not set")
        return

    # –ü–æ–ª—É—á–∞–µ–º Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    commit_hash, author = get_git_info()

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    current_time = datetime.now().strftime("%Y.%m.%d  %H:%M:%S")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""
<b>üöÄ GITHUB_DEVOPS_BOT</b>
<b>–ù–æ–≤—ã–π –≤—ã–ø—É—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π</b>

<b>–ü—Ä–æ–µ–∫—Ç:</b> {repository}
<b>–í–µ—Ä—Å–∏—è:</b> {new_version}
<b>–î–∞—Ç–∞:</b> {current_time}
<b>–ê–≤—Ç–æ—Ä:</b> {author}

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏</b>
<b>Commit:</b> {commit_hash}
<b>Version:</b> {new_version}

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏</b>
<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {docker_username}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> pipeline-app
<b>–¢–µ–≥:</b> {new_version}
<b>–ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {docker_username}/pipeline-app:{new_version}

#deployment #ci-cd #devops
"""

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_telegram_message(bot_token, chat_id, message.strip())
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º changelog —Ñ–∞–π–ª
        changelog_path = ".idea/changelog.md"
        if os.path.exists(changelog_path):
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(changelog_path)
            file_size_kb = round(file_size / 1024, 1)

            send_telegram_document(
                bot_token,
                chat_id,
                changelog_path,
                f"üìã .idea/changelog.md\n{file_size_kb} KB"
            )
            print("‚úÖ Changelog —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        else:
            print("‚ö†Ô∏è changelog.md –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        raise

if __name__ == "__main__":
    main()